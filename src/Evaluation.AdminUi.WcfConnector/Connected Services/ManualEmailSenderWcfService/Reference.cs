//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManualEmailSenderWcfService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendByQuestionaryIdRequest", Namespace="http://schemas.datacontract.org/2004/07/Evaluation.Email.Wcf.DTO")]
    public partial class SendByQuestionaryIdRequest : object
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ManualEmailSenderWcfService.IManualEmailSender")]
    public interface IManualEmailSender
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManualEmailSender/SendByQuestionaryId", ReplyAction="http://tempuri.org/IManualEmailSender/SendByQuestionaryIdResponse")]
        System.Threading.Tasks.Task<string> SendByQuestionaryIdAsync(ManualEmailSenderWcfService.SendByQuestionaryIdRequest questionaryIdRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IManualEmailSenderChannel : ManualEmailSenderWcfService.IManualEmailSender, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class ManualEmailSenderClient : System.ServiceModel.ClientBase<ManualEmailSenderWcfService.IManualEmailSender>, ManualEmailSenderWcfService.IManualEmailSender
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ManualEmailSenderClient() : 
                base(ManualEmailSenderClient.GetDefaultBinding(), ManualEmailSenderClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IManualEmailSender.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManualEmailSenderClient(EndpointConfiguration endpointConfiguration) : 
                base(ManualEmailSenderClient.GetBindingForEndpoint(endpointConfiguration), ManualEmailSenderClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManualEmailSenderClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ManualEmailSenderClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManualEmailSenderClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ManualEmailSenderClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManualEmailSenderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> SendByQuestionaryIdAsync(ManualEmailSenderWcfService.SendByQuestionaryIdRequest questionaryIdRequest)
        {
            return base.Channel.SendByQuestionaryIdAsync(questionaryIdRequest);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IManualEmailSender))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IManualEmailSender))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:19773/ManualEmailSender.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ManualEmailSenderClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IManualEmailSender);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ManualEmailSenderClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IManualEmailSender);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IManualEmailSender,
        }
    }
}
